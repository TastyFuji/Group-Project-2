generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

model User {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  email     String   @unique
  password  String?
  name      String?
  role      String   @default("user")
  enabled   Boolean  @default(true)
  address   String?
  orders    Order[]
  carts     Cart[]
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
}

model Product {
  id          String           @id @default(auto()) @map("_id") @db.ObjectId
  title       String
  description String?
  price       Float
  sold        Int              @default(0)
  quantity    Int
  orderItems  ProductOnOrder[]
  cartItems   ProductOnCart[]
  images      Image[]
  createdAt   DateTime         @default(now())
  updatedAt   DateTime         @updatedAt
  category    Category?        @relation(fields: [categoryId], references: [id])
  categoryId  String?          @db.ObjectId
}

model Order {
  id              String           @id @default(auto()) @map("_id") @db.ObjectId
  products        ProductOnOrder[]
  cartTotal       Float
  orderStatus     String           @default("Not Process")
  stripePaymentId String?
  amount          Int?
  currency        String?
  status          String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  orderedBy       User             @relation(fields: [orderedById], references: [id])
  orderedById     String           @db.ObjectId
}

model ProductOnOrder {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  product   Product @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId String  @db.ObjectId
  order     Order   @relation(fields: [orderId], references: [id], onDelete: Cascade)
  orderId   String  @db.ObjectId
  count     Int
  price     Float
}

model Category {
  id        String    @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  products  Product[]
  createdAt DateTime  @default(now())
  updatedAt DateTime  @updatedAt
}

model Cart {
  id          String          @id @default(auto()) @map("_id") @db.ObjectId
  products    ProductOnCart[]
  cartTotal   Float
  createdAt   DateTime        @default(now())
  updatedAt   DateTime        @updatedAt
  orderedBy   User            @relation(fields: [orderedById], references: [id])
  orderedById String          @db.ObjectId
}

model ProductOnCart {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  cart      Cart    @relation(fields: [cartId], references: [id], onDelete: Cascade)
  cartId    String  @db.ObjectId
  product   Product @relation(fields: [productId], references: [id])
  productId String  @db.ObjectId
  count     Int
  price     Float
}

model Image {
  id         String   @id @default(auto()) @map("_id") @db.ObjectId
  asset_id   String
  public_id  String
  url        String
  secure_url String
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt
  product    Product  @relation(fields: [productId], references: [id], onDelete: Cascade)
  productId  String   @db.ObjectId
}
